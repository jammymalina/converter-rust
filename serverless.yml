service: converter-rust

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  memorySize: 256
  timeout: 10
  versionFunctions: false
  logRetentionInDays: 1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: '*'
  environment:
    STAGE: ${self:provider.stage}

plugins:
  - serverless-aws-extended-vars
  - serverless-docker-autobuild

functions:
  convert:
    handler: convert
    vpc:
      securityGroupIds:
        - ${awsext:defaultSecurityGroupId}
      subnetIds: ${awsext:defaultSubnetIds}
    events:
      - httpApi:
          method: POST
          path: /convert

resources:
  # Resources:
  #   unitGraphSecurityGroup:
  #     Type: AWS::EC2::SecurityGroup
  #     Properties:
  #       VpcId: ${awsext:defaultVpcId}
  #       GroupName: unit-graph-${self:provider.stage}
  #       SecurityGroupIngress:
  #         - IpProtocol: tcp
  #           FromPort: 8182
  #           ToPort: 8182
  #           SourceSecurityGroupId: ${awsext:defaultSecurityGroupId}
  #   unitGraphSubnetGroup:
  #     Type: AWS::Neptune::DBSubnetGroup
  #     Properties:
  #       SubnetIds: ${awsext:defaultSubnetIds}
  #   unitGraphCluster:
  #     Type: AWS::Neptune::DBCluster
  #     Properties:
  #       BackupRetentionPeriod: 1
  #       DBClusterIdentifier: unit-graph-${self:provider.stage}
  #       DBSubnetGroupName: !Ref unitGraphSubnetGroup
  #       DeletionProtection: false
  #       EngineVersion: '1.0.4.1'
  #       VpcSecurityGroupIds:
  #         - Ref: unitGraphSecurityGroup
  #   unitGraphDatabaseInstance:
  #     Type: AWS::Neptune::DBInstance
  #     Properties:
  #       DBClusterIdentifier: !Ref unitGraphCluster
  #       DBInstanceClass: db.t3.medium
